/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HierarchyService } from "../hierarchy.service";
import { HierarchyCreateInput } from "./HierarchyCreateInput";
import { Hierarchy } from "./Hierarchy";
import { HierarchyFindManyArgs } from "./HierarchyFindManyArgs";
import { HierarchyWhereUniqueInput } from "./HierarchyWhereUniqueInput";
import { HierarchyUpdateInput } from "./HierarchyUpdateInput";

export class HierarchyControllerBase {
  constructor(protected readonly service: HierarchyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Hierarchy })
  async createHierarchy(
    @common.Body() data: HierarchyCreateInput
  ): Promise<Hierarchy> {
    return await this.service.createHierarchy({
      data: data,
      select: {
        createdAt: true,
        employee: true,
        id: true,
        level: true,
        supervisor: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Hierarchy] })
  @ApiNestedQuery(HierarchyFindManyArgs)
  async hierarchies(@common.Req() request: Request): Promise<Hierarchy[]> {
    const args = plainToClass(HierarchyFindManyArgs, request.query);
    return this.service.hierarchies({
      ...args,
      select: {
        createdAt: true,
        employee: true,
        id: true,
        level: true,
        supervisor: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Hierarchy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async hierarchy(
    @common.Param() params: HierarchyWhereUniqueInput
  ): Promise<Hierarchy | null> {
    const result = await this.service.hierarchy({
      where: params,
      select: {
        createdAt: true,
        employee: true,
        id: true,
        level: true,
        supervisor: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Hierarchy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHierarchy(
    @common.Param() params: HierarchyWhereUniqueInput,
    @common.Body() data: HierarchyUpdateInput
  ): Promise<Hierarchy | null> {
    try {
      return await this.service.updateHierarchy({
        where: params,
        data: data,
        select: {
          createdAt: true,
          employee: true,
          id: true,
          level: true,
          supervisor: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Hierarchy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHierarchy(
    @common.Param() params: HierarchyWhereUniqueInput
  ): Promise<Hierarchy | null> {
    try {
      return await this.service.deleteHierarchy({
        where: params,
        select: {
          createdAt: true,
          employee: true,
          id: true,
          level: true,
          supervisor: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
