/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Hierarchy as PrismaHierarchy } from "@prisma/client";

export class HierarchyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HierarchyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.hierarchy.count(args);
  }

  async hierarchies(
    args: Prisma.HierarchyFindManyArgs
  ): Promise<PrismaHierarchy[]> {
    return this.prisma.hierarchy.findMany(args);
  }
  async hierarchy(
    args: Prisma.HierarchyFindUniqueArgs
  ): Promise<PrismaHierarchy | null> {
    return this.prisma.hierarchy.findUnique(args);
  }
  async createHierarchy(
    args: Prisma.HierarchyCreateArgs
  ): Promise<PrismaHierarchy> {
    return this.prisma.hierarchy.create(args);
  }
  async updateHierarchy(
    args: Prisma.HierarchyUpdateArgs
  ): Promise<PrismaHierarchy> {
    return this.prisma.hierarchy.update(args);
  }
  async deleteHierarchy(
    args: Prisma.HierarchyDeleteArgs
  ): Promise<PrismaHierarchy> {
    return this.prisma.hierarchy.delete(args);
  }
}
