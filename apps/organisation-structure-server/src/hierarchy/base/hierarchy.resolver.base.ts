/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Hierarchy } from "./Hierarchy";
import { HierarchyCountArgs } from "./HierarchyCountArgs";
import { HierarchyFindManyArgs } from "./HierarchyFindManyArgs";
import { HierarchyFindUniqueArgs } from "./HierarchyFindUniqueArgs";
import { CreateHierarchyArgs } from "./CreateHierarchyArgs";
import { UpdateHierarchyArgs } from "./UpdateHierarchyArgs";
import { DeleteHierarchyArgs } from "./DeleteHierarchyArgs";
import { HierarchyService } from "../hierarchy.service";
@graphql.Resolver(() => Hierarchy)
export class HierarchyResolverBase {
  constructor(protected readonly service: HierarchyService) {}

  async _hierarchiesMeta(
    @graphql.Args() args: HierarchyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Hierarchy])
  async hierarchies(
    @graphql.Args() args: HierarchyFindManyArgs
  ): Promise<Hierarchy[]> {
    return this.service.hierarchies(args);
  }

  @graphql.Query(() => Hierarchy, { nullable: true })
  async hierarchy(
    @graphql.Args() args: HierarchyFindUniqueArgs
  ): Promise<Hierarchy | null> {
    const result = await this.service.hierarchy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Hierarchy)
  async createHierarchy(
    @graphql.Args() args: CreateHierarchyArgs
  ): Promise<Hierarchy> {
    return await this.service.createHierarchy({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Hierarchy)
  async updateHierarchy(
    @graphql.Args() args: UpdateHierarchyArgs
  ): Promise<Hierarchy | null> {
    try {
      return await this.service.updateHierarchy({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Hierarchy)
  async deleteHierarchy(
    @graphql.Args() args: DeleteHierarchyArgs
  ): Promise<Hierarchy | null> {
    try {
      return await this.service.deleteHierarchy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
