/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Recruitment } from "./Recruitment";
import { RecruitmentCountArgs } from "./RecruitmentCountArgs";
import { RecruitmentFindManyArgs } from "./RecruitmentFindManyArgs";
import { RecruitmentFindUniqueArgs } from "./RecruitmentFindUniqueArgs";
import { CreateRecruitmentArgs } from "./CreateRecruitmentArgs";
import { UpdateRecruitmentArgs } from "./UpdateRecruitmentArgs";
import { DeleteRecruitmentArgs } from "./DeleteRecruitmentArgs";
import { RecruitmentService } from "../recruitment.service";
@graphql.Resolver(() => Recruitment)
export class RecruitmentResolverBase {
  constructor(protected readonly service: RecruitmentService) {}

  async _recruitmentsMeta(
    @graphql.Args() args: RecruitmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Recruitment])
  async recruitments(
    @graphql.Args() args: RecruitmentFindManyArgs
  ): Promise<Recruitment[]> {
    return this.service.recruitments(args);
  }

  @graphql.Query(() => Recruitment, { nullable: true })
  async recruitment(
    @graphql.Args() args: RecruitmentFindUniqueArgs
  ): Promise<Recruitment | null> {
    const result = await this.service.recruitment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Recruitment)
  async createRecruitment(
    @graphql.Args() args: CreateRecruitmentArgs
  ): Promise<Recruitment> {
    return await this.service.createRecruitment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Recruitment)
  async updateRecruitment(
    @graphql.Args() args: UpdateRecruitmentArgs
  ): Promise<Recruitment | null> {
    try {
      return await this.service.updateRecruitment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Recruitment)
  async deleteRecruitment(
    @graphql.Args() args: DeleteRecruitmentArgs
  ): Promise<Recruitment | null> {
    try {
      return await this.service.deleteRecruitment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
