/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmployeeEngagement } from "./EmployeeEngagement";
import { EmployeeEngagementCountArgs } from "./EmployeeEngagementCountArgs";
import { EmployeeEngagementFindManyArgs } from "./EmployeeEngagementFindManyArgs";
import { EmployeeEngagementFindUniqueArgs } from "./EmployeeEngagementFindUniqueArgs";
import { CreateEmployeeEngagementArgs } from "./CreateEmployeeEngagementArgs";
import { UpdateEmployeeEngagementArgs } from "./UpdateEmployeeEngagementArgs";
import { DeleteEmployeeEngagementArgs } from "./DeleteEmployeeEngagementArgs";
import { EmployeeEngagementService } from "../employeeEngagement.service";
@graphql.Resolver(() => EmployeeEngagement)
export class EmployeeEngagementResolverBase {
  constructor(protected readonly service: EmployeeEngagementService) {}

  async _employeeEngagementsMeta(
    @graphql.Args() args: EmployeeEngagementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeEngagement])
  async employeeEngagements(
    @graphql.Args() args: EmployeeEngagementFindManyArgs
  ): Promise<EmployeeEngagement[]> {
    return this.service.employeeEngagements(args);
  }

  @graphql.Query(() => EmployeeEngagement, { nullable: true })
  async employeeEngagement(
    @graphql.Args() args: EmployeeEngagementFindUniqueArgs
  ): Promise<EmployeeEngagement | null> {
    const result = await this.service.employeeEngagement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeEngagement)
  async createEmployeeEngagement(
    @graphql.Args() args: CreateEmployeeEngagementArgs
  ): Promise<EmployeeEngagement> {
    return await this.service.createEmployeeEngagement({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EmployeeEngagement)
  async updateEmployeeEngagement(
    @graphql.Args() args: UpdateEmployeeEngagementArgs
  ): Promise<EmployeeEngagement | null> {
    try {
      return await this.service.updateEmployeeEngagement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeEngagement)
  async deleteEmployeeEngagement(
    @graphql.Args() args: DeleteEmployeeEngagementArgs
  ): Promise<EmployeeEngagement | null> {
    try {
      return await this.service.deleteEmployeeEngagement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
