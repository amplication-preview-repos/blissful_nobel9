/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PayrollRecordService } from "../payrollRecord.service";
import { PayrollRecordCreateInput } from "./PayrollRecordCreateInput";
import { PayrollRecord } from "./PayrollRecord";
import { PayrollRecordFindManyArgs } from "./PayrollRecordFindManyArgs";
import { PayrollRecordWhereUniqueInput } from "./PayrollRecordWhereUniqueInput";
import { PayrollRecordUpdateInput } from "./PayrollRecordUpdateInput";
import { PaySlipFindManyArgs } from "../../paySlip/base/PaySlipFindManyArgs";
import { PaySlip } from "../../paySlip/base/PaySlip";
import { PaySlipWhereUniqueInput } from "../../paySlip/base/PaySlipWhereUniqueInput";

export class PayrollRecordControllerBase {
  constructor(protected readonly service: PayrollRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PayrollRecord })
  async createPayrollRecord(
    @common.Body() data: PayrollRecordCreateInput
  ): Promise<PayrollRecord> {
    return await this.service.createPayrollRecord({
      data: {
        ...data,

        employeeSalary: data.employeeSalary
          ? {
              connect: data.employeeSalary,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,

        employeeSalary: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PayrollRecord] })
  @ApiNestedQuery(PayrollRecordFindManyArgs)
  async payrollRecords(
    @common.Req() request: Request
  ): Promise<PayrollRecord[]> {
    const args = plainToClass(PayrollRecordFindManyArgs, request.query);
    return this.service.payrollRecords({
      ...args,
      select: {
        createdAt: true,
        date: true,

        employeeSalary: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PayrollRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async payrollRecord(
    @common.Param() params: PayrollRecordWhereUniqueInput
  ): Promise<PayrollRecord | null> {
    const result = await this.service.payrollRecord({
      where: params,
      select: {
        createdAt: true,
        date: true,

        employeeSalary: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PayrollRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePayrollRecord(
    @common.Param() params: PayrollRecordWhereUniqueInput,
    @common.Body() data: PayrollRecordUpdateInput
  ): Promise<PayrollRecord | null> {
    try {
      return await this.service.updatePayrollRecord({
        where: params,
        data: {
          ...data,

          employeeSalary: data.employeeSalary
            ? {
                connect: data.employeeSalary,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,

          employeeSalary: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PayrollRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePayrollRecord(
    @common.Param() params: PayrollRecordWhereUniqueInput
  ): Promise<PayrollRecord | null> {
    try {
      return await this.service.deletePayrollRecord({
        where: params,
        select: {
          createdAt: true,
          date: true,

          employeeSalary: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/paySlips")
  @ApiNestedQuery(PaySlipFindManyArgs)
  async findPaySlips(
    @common.Req() request: Request,
    @common.Param() params: PayrollRecordWhereUniqueInput
  ): Promise<PaySlip[]> {
    const query = plainToClass(PaySlipFindManyArgs, request.query);
    const results = await this.service.findPaySlips(params.id, {
      ...query,
      select: {
        createdAt: true,
        employee: true,
        id: true,
        issuedAt: true,

        payrollRecord: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paySlips")
  async connectPaySlips(
    @common.Param() params: PayrollRecordWhereUniqueInput,
    @common.Body() body: PaySlipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paySlips: {
        connect: body,
      },
    };
    await this.service.updatePayrollRecord({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paySlips")
  async updatePaySlips(
    @common.Param() params: PayrollRecordWhereUniqueInput,
    @common.Body() body: PaySlipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paySlips: {
        set: body,
      },
    };
    await this.service.updatePayrollRecord({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paySlips")
  async disconnectPaySlips(
    @common.Param() params: PayrollRecordWhereUniqueInput,
    @common.Body() body: PaySlipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paySlips: {
        disconnect: body,
      },
    };
    await this.service.updatePayrollRecord({
      where: params,
      data,
      select: { id: true },
    });
  }
}
