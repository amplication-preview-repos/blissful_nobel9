/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PayrollRecord as PrismaPayrollRecord,
  PaySlip as PrismaPaySlip,
  EmployeeSalary as PrismaEmployeeSalary,
} from "@prisma/client";

export class PayrollRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PayrollRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.payrollRecord.count(args);
  }

  async payrollRecords(
    args: Prisma.PayrollRecordFindManyArgs
  ): Promise<PrismaPayrollRecord[]> {
    return this.prisma.payrollRecord.findMany(args);
  }
  async payrollRecord(
    args: Prisma.PayrollRecordFindUniqueArgs
  ): Promise<PrismaPayrollRecord | null> {
    return this.prisma.payrollRecord.findUnique(args);
  }
  async createPayrollRecord(
    args: Prisma.PayrollRecordCreateArgs
  ): Promise<PrismaPayrollRecord> {
    return this.prisma.payrollRecord.create(args);
  }
  async updatePayrollRecord(
    args: Prisma.PayrollRecordUpdateArgs
  ): Promise<PrismaPayrollRecord> {
    return this.prisma.payrollRecord.update(args);
  }
  async deletePayrollRecord(
    args: Prisma.PayrollRecordDeleteArgs
  ): Promise<PrismaPayrollRecord> {
    return this.prisma.payrollRecord.delete(args);
  }

  async findPaySlips(
    parentId: string,
    args: Prisma.PaySlipFindManyArgs
  ): Promise<PrismaPaySlip[]> {
    return this.prisma.payrollRecord
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paySlips(args);
  }

  async getEmployeeSalary(
    parentId: string
  ): Promise<PrismaEmployeeSalary | null> {
    return this.prisma.payrollRecord
      .findUnique({
        where: { id: parentId },
      })
      .employeeSalary();
  }
}
