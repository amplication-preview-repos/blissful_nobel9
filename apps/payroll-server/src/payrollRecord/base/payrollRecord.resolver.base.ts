/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PayrollRecord } from "./PayrollRecord";
import { PayrollRecordCountArgs } from "./PayrollRecordCountArgs";
import { PayrollRecordFindManyArgs } from "./PayrollRecordFindManyArgs";
import { PayrollRecordFindUniqueArgs } from "./PayrollRecordFindUniqueArgs";
import { CreatePayrollRecordArgs } from "./CreatePayrollRecordArgs";
import { UpdatePayrollRecordArgs } from "./UpdatePayrollRecordArgs";
import { DeletePayrollRecordArgs } from "./DeletePayrollRecordArgs";
import { PaySlipFindManyArgs } from "../../paySlip/base/PaySlipFindManyArgs";
import { PaySlip } from "../../paySlip/base/PaySlip";
import { EmployeeSalary } from "../../employeeSalary/base/EmployeeSalary";
import { PayrollRecordService } from "../payrollRecord.service";
@graphql.Resolver(() => PayrollRecord)
export class PayrollRecordResolverBase {
  constructor(protected readonly service: PayrollRecordService) {}

  async _payrollRecordsMeta(
    @graphql.Args() args: PayrollRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PayrollRecord])
  async payrollRecords(
    @graphql.Args() args: PayrollRecordFindManyArgs
  ): Promise<PayrollRecord[]> {
    return this.service.payrollRecords(args);
  }

  @graphql.Query(() => PayrollRecord, { nullable: true })
  async payrollRecord(
    @graphql.Args() args: PayrollRecordFindUniqueArgs
  ): Promise<PayrollRecord | null> {
    const result = await this.service.payrollRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PayrollRecord)
  async createPayrollRecord(
    @graphql.Args() args: CreatePayrollRecordArgs
  ): Promise<PayrollRecord> {
    return await this.service.createPayrollRecord({
      ...args,
      data: {
        ...args.data,

        employeeSalary: args.data.employeeSalary
          ? {
              connect: args.data.employeeSalary,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PayrollRecord)
  async updatePayrollRecord(
    @graphql.Args() args: UpdatePayrollRecordArgs
  ): Promise<PayrollRecord | null> {
    try {
      return await this.service.updatePayrollRecord({
        ...args,
        data: {
          ...args.data,

          employeeSalary: args.data.employeeSalary
            ? {
                connect: args.data.employeeSalary,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PayrollRecord)
  async deletePayrollRecord(
    @graphql.Args() args: DeletePayrollRecordArgs
  ): Promise<PayrollRecord | null> {
    try {
      return await this.service.deletePayrollRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PaySlip], { name: "paySlips" })
  async findPaySlips(
    @graphql.Parent() parent: PayrollRecord,
    @graphql.Args() args: PaySlipFindManyArgs
  ): Promise<PaySlip[]> {
    const results = await this.service.findPaySlips(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => EmployeeSalary, {
    nullable: true,
    name: "employeeSalary",
  })
  async getEmployeeSalary(
    @graphql.Parent() parent: PayrollRecord
  ): Promise<EmployeeSalary | null> {
    const result = await this.service.getEmployeeSalary(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
