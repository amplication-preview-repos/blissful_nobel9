/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeSalaryService } from "../employeeSalary.service";
import { EmployeeSalaryCreateInput } from "./EmployeeSalaryCreateInput";
import { EmployeeSalary } from "./EmployeeSalary";
import { EmployeeSalaryFindManyArgs } from "./EmployeeSalaryFindManyArgs";
import { EmployeeSalaryWhereUniqueInput } from "./EmployeeSalaryWhereUniqueInput";
import { EmployeeSalaryUpdateInput } from "./EmployeeSalaryUpdateInput";
import { PayrollRecordFindManyArgs } from "../../payrollRecord/base/PayrollRecordFindManyArgs";
import { PayrollRecord } from "../../payrollRecord/base/PayrollRecord";
import { PayrollRecordWhereUniqueInput } from "../../payrollRecord/base/PayrollRecordWhereUniqueInput";

export class EmployeeSalaryControllerBase {
  constructor(protected readonly service: EmployeeSalaryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeSalary })
  async createEmployeeSalary(
    @common.Body() data: EmployeeSalaryCreateInput
  ): Promise<EmployeeSalary> {
    return await this.service.createEmployeeSalary({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        employee: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeSalary] })
  @ApiNestedQuery(EmployeeSalaryFindManyArgs)
  async employeeSalaries(
    @common.Req() request: Request
  ): Promise<EmployeeSalary[]> {
    const args = plainToClass(EmployeeSalaryFindManyArgs, request.query);
    return this.service.employeeSalaries({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        employee: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeSalary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employeeSalary(
    @common.Param() params: EmployeeSalaryWhereUniqueInput
  ): Promise<EmployeeSalary | null> {
    const result = await this.service.employeeSalary({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        date: true,
        employee: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeSalary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmployeeSalary(
    @common.Param() params: EmployeeSalaryWhereUniqueInput,
    @common.Body() data: EmployeeSalaryUpdateInput
  ): Promise<EmployeeSalary | null> {
    try {
      return await this.service.updateEmployeeSalary({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          employee: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeSalary })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployeeSalary(
    @common.Param() params: EmployeeSalaryWhereUniqueInput
  ): Promise<EmployeeSalary | null> {
    try {
      return await this.service.deleteEmployeeSalary({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          date: true,
          employee: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/payrollRecords")
  @ApiNestedQuery(PayrollRecordFindManyArgs)
  async findPayrollRecords(
    @common.Req() request: Request,
    @common.Param() params: EmployeeSalaryWhereUniqueInput
  ): Promise<PayrollRecord[]> {
    const query = plainToClass(PayrollRecordFindManyArgs, request.query);
    const results = await this.service.findPayrollRecords(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,

        employeeSalary: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payrollRecords")
  async connectPayrollRecords(
    @common.Param() params: EmployeeSalaryWhereUniqueInput,
    @common.Body() body: PayrollRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrollRecords: {
        connect: body,
      },
    };
    await this.service.updateEmployeeSalary({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payrollRecords")
  async updatePayrollRecords(
    @common.Param() params: EmployeeSalaryWhereUniqueInput,
    @common.Body() body: PayrollRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrollRecords: {
        set: body,
      },
    };
    await this.service.updateEmployeeSalary({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payrollRecords")
  async disconnectPayrollRecords(
    @common.Param() params: EmployeeSalaryWhereUniqueInput,
    @common.Body() body: PayrollRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payrollRecords: {
        disconnect: body,
      },
    };
    await this.service.updateEmployeeSalary({
      where: params,
      data,
      select: { id: true },
    });
  }
}
