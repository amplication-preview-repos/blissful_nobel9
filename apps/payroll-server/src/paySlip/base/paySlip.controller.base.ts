/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PaySlipService } from "../paySlip.service";
import { PaySlipCreateInput } from "./PaySlipCreateInput";
import { PaySlip } from "./PaySlip";
import { PaySlipFindManyArgs } from "./PaySlipFindManyArgs";
import { PaySlipWhereUniqueInput } from "./PaySlipWhereUniqueInput";
import { PaySlipUpdateInput } from "./PaySlipUpdateInput";

export class PaySlipControllerBase {
  constructor(protected readonly service: PaySlipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaySlip })
  async createPaySlip(
    @common.Body() data: PaySlipCreateInput
  ): Promise<PaySlip> {
    return await this.service.createPaySlip({
      data: {
        ...data,

        payrollRecord: data.payrollRecord
          ? {
              connect: data.payrollRecord,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        employee: true,
        id: true,
        issuedAt: true,

        payrollRecord: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PaySlip] })
  @ApiNestedQuery(PaySlipFindManyArgs)
  async paySlips(@common.Req() request: Request): Promise<PaySlip[]> {
    const args = plainToClass(PaySlipFindManyArgs, request.query);
    return this.service.paySlips({
      ...args,
      select: {
        createdAt: true,
        employee: true,
        id: true,
        issuedAt: true,

        payrollRecord: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaySlip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async paySlip(
    @common.Param() params: PaySlipWhereUniqueInput
  ): Promise<PaySlip | null> {
    const result = await this.service.paySlip({
      where: params,
      select: {
        createdAt: true,
        employee: true,
        id: true,
        issuedAt: true,

        payrollRecord: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaySlip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePaySlip(
    @common.Param() params: PaySlipWhereUniqueInput,
    @common.Body() data: PaySlipUpdateInput
  ): Promise<PaySlip | null> {
    try {
      return await this.service.updatePaySlip({
        where: params,
        data: {
          ...data,

          payrollRecord: data.payrollRecord
            ? {
                connect: data.payrollRecord,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          employee: true,
          id: true,
          issuedAt: true,

          payrollRecord: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaySlip })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePaySlip(
    @common.Param() params: PaySlipWhereUniqueInput
  ): Promise<PaySlip | null> {
    try {
      return await this.service.deletePaySlip({
        where: params,
        select: {
          createdAt: true,
          employee: true,
          id: true,
          issuedAt: true,

          payrollRecord: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
