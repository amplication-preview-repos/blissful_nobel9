/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PiRecordService } from "../piRecord.service";
import { PiRecordCreateInput } from "./PiRecordCreateInput";
import { PiRecord } from "./PiRecord";
import { PiRecordFindManyArgs } from "./PiRecordFindManyArgs";
import { PiRecordWhereUniqueInput } from "./PiRecordWhereUniqueInput";
import { PiRecordUpdateInput } from "./PiRecordUpdateInput";

export class PiRecordControllerBase {
  constructor(protected readonly service: PiRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PiRecord })
  async createPiRecord(
    @common.Body() data: PiRecordCreateInput
  ): Promise<PiRecord> {
    return await this.service.createPiRecord({
      data: {
        ...data,

        quotation: data.quotation
          ? {
              connect: data.quotation,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        id: true,
        issuedBy: true,

        quotation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PiRecord] })
  @ApiNestedQuery(PiRecordFindManyArgs)
  async piRecords(@common.Req() request: Request): Promise<PiRecord[]> {
    const args = plainToClass(PiRecordFindManyArgs, request.query);
    return this.service.piRecords({
      ...args,
      select: {
        createdAt: true,
        date: true,
        id: true,
        issuedBy: true,

        quotation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PiRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async piRecord(
    @common.Param() params: PiRecordWhereUniqueInput
  ): Promise<PiRecord | null> {
    const result = await this.service.piRecord({
      where: params,
      select: {
        createdAt: true,
        date: true,
        id: true,
        issuedBy: true,

        quotation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PiRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePiRecord(
    @common.Param() params: PiRecordWhereUniqueInput,
    @common.Body() data: PiRecordUpdateInput
  ): Promise<PiRecord | null> {
    try {
      return await this.service.updatePiRecord({
        where: params,
        data: {
          ...data,

          quotation: data.quotation
            ? {
                connect: data.quotation,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          id: true,
          issuedBy: true,

          quotation: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PiRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePiRecord(
    @common.Param() params: PiRecordWhereUniqueInput
  ): Promise<PiRecord | null> {
    try {
      return await this.service.deletePiRecord({
        where: params,
        select: {
          createdAt: true,
          date: true,
          id: true,
          issuedBy: true,

          quotation: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
