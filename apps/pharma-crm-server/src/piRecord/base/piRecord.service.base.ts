/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PiRecord as PrismaPiRecord,
  Quotation as PrismaQuotation,
} from "@prisma/client";

export class PiRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PiRecordCountArgs, "select">): Promise<number> {
    return this.prisma.piRecord.count(args);
  }

  async piRecords(
    args: Prisma.PiRecordFindManyArgs
  ): Promise<PrismaPiRecord[]> {
    return this.prisma.piRecord.findMany(args);
  }
  async piRecord(
    args: Prisma.PiRecordFindUniqueArgs
  ): Promise<PrismaPiRecord | null> {
    return this.prisma.piRecord.findUnique(args);
  }
  async createPiRecord(
    args: Prisma.PiRecordCreateArgs
  ): Promise<PrismaPiRecord> {
    return this.prisma.piRecord.create(args);
  }
  async updatePiRecord(
    args: Prisma.PiRecordUpdateArgs
  ): Promise<PrismaPiRecord> {
    return this.prisma.piRecord.update(args);
  }
  async deletePiRecord(
    args: Prisma.PiRecordDeleteArgs
  ): Promise<PrismaPiRecord> {
    return this.prisma.piRecord.delete(args);
  }

  async getQuotation(parentId: string): Promise<PrismaQuotation | null> {
    return this.prisma.piRecord
      .findUnique({
        where: { id: parentId },
      })
      .quotation();
  }
}
