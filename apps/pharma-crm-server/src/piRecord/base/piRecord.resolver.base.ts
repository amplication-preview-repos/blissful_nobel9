/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PiRecord } from "./PiRecord";
import { PiRecordCountArgs } from "./PiRecordCountArgs";
import { PiRecordFindManyArgs } from "./PiRecordFindManyArgs";
import { PiRecordFindUniqueArgs } from "./PiRecordFindUniqueArgs";
import { CreatePiRecordArgs } from "./CreatePiRecordArgs";
import { UpdatePiRecordArgs } from "./UpdatePiRecordArgs";
import { DeletePiRecordArgs } from "./DeletePiRecordArgs";
import { Quotation } from "../../quotation/base/Quotation";
import { PiRecordService } from "../piRecord.service";
@graphql.Resolver(() => PiRecord)
export class PiRecordResolverBase {
  constructor(protected readonly service: PiRecordService) {}

  async _piRecordsMeta(
    @graphql.Args() args: PiRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PiRecord])
  async piRecords(
    @graphql.Args() args: PiRecordFindManyArgs
  ): Promise<PiRecord[]> {
    return this.service.piRecords(args);
  }

  @graphql.Query(() => PiRecord, { nullable: true })
  async piRecord(
    @graphql.Args() args: PiRecordFindUniqueArgs
  ): Promise<PiRecord | null> {
    const result = await this.service.piRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PiRecord)
  async createPiRecord(
    @graphql.Args() args: CreatePiRecordArgs
  ): Promise<PiRecord> {
    return await this.service.createPiRecord({
      ...args,
      data: {
        ...args.data,

        quotation: args.data.quotation
          ? {
              connect: args.data.quotation,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PiRecord)
  async updatePiRecord(
    @graphql.Args() args: UpdatePiRecordArgs
  ): Promise<PiRecord | null> {
    try {
      return await this.service.updatePiRecord({
        ...args,
        data: {
          ...args.data,

          quotation: args.data.quotation
            ? {
                connect: args.data.quotation,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PiRecord)
  async deletePiRecord(
    @graphql.Args() args: DeletePiRecordArgs
  ): Promise<PiRecord | null> {
    try {
      return await this.service.deletePiRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Quotation, {
    nullable: true,
    name: "quotation",
  })
  async getQuotation(
    @graphql.Parent() parent: PiRecord
  ): Promise<Quotation | null> {
    const result = await this.service.getQuotation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
