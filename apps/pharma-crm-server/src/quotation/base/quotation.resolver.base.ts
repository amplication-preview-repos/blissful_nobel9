/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Quotation } from "./Quotation";
import { QuotationCountArgs } from "./QuotationCountArgs";
import { QuotationFindManyArgs } from "./QuotationFindManyArgs";
import { QuotationFindUniqueArgs } from "./QuotationFindUniqueArgs";
import { CreateQuotationArgs } from "./CreateQuotationArgs";
import { UpdateQuotationArgs } from "./UpdateQuotationArgs";
import { DeleteQuotationArgs } from "./DeleteQuotationArgs";
import { PiRecordFindManyArgs } from "../../piRecord/base/PiRecordFindManyArgs";
import { PiRecord } from "../../piRecord/base/PiRecord";
import { Product } from "../../product/base/Product";
import { QuotationService } from "../quotation.service";
@graphql.Resolver(() => Quotation)
export class QuotationResolverBase {
  constructor(protected readonly service: QuotationService) {}

  async _quotationsMeta(
    @graphql.Args() args: QuotationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Quotation])
  async quotations(
    @graphql.Args() args: QuotationFindManyArgs
  ): Promise<Quotation[]> {
    return this.service.quotations(args);
  }

  @graphql.Query(() => Quotation, { nullable: true })
  async quotation(
    @graphql.Args() args: QuotationFindUniqueArgs
  ): Promise<Quotation | null> {
    const result = await this.service.quotation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Quotation)
  async createQuotation(
    @graphql.Args() args: CreateQuotationArgs
  ): Promise<Quotation> {
    return await this.service.createQuotation({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Quotation)
  async updateQuotation(
    @graphql.Args() args: UpdateQuotationArgs
  ): Promise<Quotation | null> {
    try {
      return await this.service.updateQuotation({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Quotation)
  async deleteQuotation(
    @graphql.Args() args: DeleteQuotationArgs
  ): Promise<Quotation | null> {
    try {
      return await this.service.deleteQuotation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PiRecord], { name: "piRecords" })
  async findPiRecords(
    @graphql.Parent() parent: Quotation,
    @graphql.Args() args: PiRecordFindManyArgs
  ): Promise<PiRecord[]> {
    const results = await this.service.findPiRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  async getProduct(
    @graphql.Parent() parent: Quotation
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
